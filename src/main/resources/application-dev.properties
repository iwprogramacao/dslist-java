#   Descomentar essas 4 linhas abaixo e mudar o perfil no arquivo application.properties
#   para spring.profiles.active=${APP_PROFILE:dev}, ao executar o projeto, será criado um
#   arquivo "create.sql" para levantar um banco de dados já populado, inclusive, com os mesmos
#   dados que foram inseridos no "import.sql". Como estamos fora do contexto de container,
#   precisamos passar na "spring.datasource.url" a nossa porta mapeada pelo container do Docker
#   para que possamos acessar o banco que está no container. Diferentemente de situações onde
#   as imagens que desejam conversar estejam no mesmo container, logo a porta que deve ser
#   utilizada é a porta padrão do container. EXEMPLO: A porta padrão do Postgre é 5432, e
#   neste projeto, mapeamos a nossa porta para 5433. O PGAdmin que subimos junto do Postgre
#   no container utiliza a porta 5432 para fazer o acesso.

#spring.jpa.properties.jakarta.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

spring.datasource.url=jdbc:postgresql://localhost:5433/dslist
spring.datasource.username=postgres
spring.datasource.password=1234567

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=none
